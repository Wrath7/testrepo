using System;
using System.Collections.Generic;
using System.Text;
using System.Configuration;
using System.Net.Mail;

namespace Illuminate.Tools
{
	/// <summary>
	/// Class to send e-mails though Google GMAIL
	/// </summary>
	public class EmailService
	{
		#region Events

		/// <summary>
		/// Deletage for sucess of an email
		/// </summary>
		public delegate void EmailServiceSuccessDelegate();

		/// <summary>
		/// Delegate for error of an email
		/// </summary>
		/// <param name="ErrorMessage">The error message generated by the send event</param>
		/// <param name="StackTrace">The stack trace of the exception</param>
		public delegate void EmailServiceErrorDelegate(string ErrorMessage, string StackTrace);

		/// <summary>
		/// Event which is raised when an send succeeds
		/// </summary>
		public event EmailServiceSuccessDelegate OnSuccess;

		/// <summary>
		/// Event which is raised when an error occurs during the send event.
		/// </summary>
		public event EmailServiceErrorDelegate OnError;

		#endregion

		#region Constructor

		public EmailService()
		{
			//only do this once instead of for every email
			ValidateConfigFile();
		}

		#endregion

		#region Methods

		/// <summary>
		/// This method sends an email using a SMTP server
		/// 
		/// This class requires the following data to be entered into your app.config
		/// 
		/// Smtp.Host: IP Address or Domain of your SMTP server
		/// Smtp.Port: The port of your SMTP server
		/// Smtp.UseSsl: True or False depending on whether you wish to use SSL
		/// Smtp.Username: The username of your SMTP server
		/// Smtp.Password: The password of your SMTP server
		/// </summary>
		/// <param name="FromAddress">(e.g. dplouffe@gmail.com)</param>
		/// <param name="FromDisplayName">(e.g. Dominic Plouffe)</param>
		/// <param name="ToAddress">(e.g. jdoe@mydomain.com)</param>
		/// <param name="Subject">Text subject line</param>
		/// <param name="HtmlBody">HTML version of your body</param>
		public void SendEmail(string FromAddress, string FromDisplayName, string ToAddress, string Subject, string HtmlBody)
		{
			// Call the full version with null for the attachments.
			SendEmail(FromAddress, FromDisplayName, ToAddress, null, null, Subject, HtmlBody, null);
		}

		/// <summary>
		/// This method sends an email using a SMTP server
		/// 
		/// This class requires the following data to be entered into your app.config
		/// 
		/// Smtp.Host: IP Address or Domain of your SMTP server
		/// Smtp.Port: The port of your SMTP server
		/// Smtp.UseSsl: True or False depending on whether you wish to use SSL
		/// Smtp.Username: The username of your SMTP server
		/// Smtp.Password: The password of your SMTP server
		/// </summary>
		/// <param name="FromAddress">(e.g. dplouffe@gmail.com)</param>
		/// <param name="FromDisplayName">(e.g. Dominic Plouffe)</param>
		/// <param name="ToAddress">(e.g. jdoe@mydomain.com)</param>
		/// <param name="Subject">Text subject line</param>
		/// <param name="HtmlBody">HTML version of your body</param>
		/// <param name="ReplyToEmail">The e-mail address which will be replied to from the reciever</param>
		/// <param name="ReplyToDisplayName">The text of the reply-to which will be displayed when replying</param>
		public void SendEmail(string FromAddress, string FromDisplayName, string ToAddress, string ReplyToEmail, string ReplyToDisplayName, string Subject, string HtmlBody)
		{
			// Call the full version with null for the attachments.
			SendEmail(FromAddress, FromDisplayName, ToAddress, ReplyToEmail, ReplyToDisplayName, Subject, HtmlBody, null);
		}

        /// <summary>
        /// This method sends an email using a SMTP server
        /// 
        /// This class requires the following data to be entered into your app.config
        /// 
        /// Smtp.Host: IP Address or Domain of your SMTP server
        /// Smtp.Port: The port of your SMTP server
        /// Smtp.UseSsl: True or False depending on whether you wish to use SSL
        /// Smtp.Username: The username of your SMTP server
        /// Smtp.Password: The password of your SMTP server
        /// </summary>
        /// <param name="FromAddress">(e.g. dplouffe@gmail.com)</param>
        /// <param name="FromDisplayName">(e.g. Dominic Plouffe)</param>
        /// <param name="ToAddresses">(e.g. jdoe@mydomain.com)</param>
        /// <param name="Subject">Text subject line</param>
        /// <param name="HtmlBody">HTML version of your body</param>
        /// <param name="ReplyToEmail">The e-mail address which will be replied to from the reciever</param>
        /// <param name="ReplyToDisplayName">The text of the reply-to which will be displayed when replying</param>
        public void SendEmail(string FromAddress, string FromDisplayName, List<string> ToAddresses, string ReplyToEmail, string ReplyToDisplayName, string Subject, string HtmlBody)
        {
            // Call the full version with null for the attachments.
            foreach (string ToAddress in ToAddresses)
            {
                SendEmail(FromAddress, FromDisplayName, ToAddress, ReplyToEmail, ReplyToDisplayName, Subject, HtmlBody, null);
            }
        }

		/// <summary>
		/// This method sends an email using a SMTP server
		/// 
		/// This class requires the following data to be entered into your app.config
		/// 
		/// Smtp.Host: IP Address or Domain of your SMTP server
		/// Smtp.Port: The port of your SMTP server
		/// Smtp.UseSsl: True or False depending on whether you wish to use SSL
		/// Smtp.Username: The username of your SMTP server
		/// Smtp.Password: The password of your SMTP server
		/// </summary>
		/// <param name="FromAddress">(e.g. dplouffe@gmail.com)</param>
		/// <param name="FromDisplayName">(e.g. Dominic Plouffe)</param>
		/// <param name="ToAddress">(e.g. jdoe@mydomain.com)</param>
		/// <param name="Subject">Text subject line</param>
		/// <param name="HtmlBody">HTML version of your body</param>
		/// <param name="ReplyToEmail">The e-mail address which will be replied to from the reciever</param>
		/// <param name="ReplyToDisplayName">The text of the reply-to which will be displayed when replying</param>
		/// <param name="Attachments">String array of the paths to the attachments</param>
		public void SendEmail(string FromAddress, string FromDisplayName, string ToAddress, string ReplyToEmail, string ReplyToDisplayName, string Subject, string HtmlBody, string[] Attachments)
		{
			//Create MailMessage Object
			MailMessage Mail = new MailMessage();

			//Create SmtpClient Object
			SmtpClient Smtp = new SmtpClient();

			//Construct MailMessage Information
			Mail.From = new MailAddress(FromAddress, FromDisplayName);
			Mail.To.Add(ToAddress);
			Mail.Subject = Subject;
			Mail.Body = HtmlBody;
			Mail.IsBodyHtml = true;

			if (!string.IsNullOrEmpty(ReplyToEmail) && !string.IsNullOrEmpty(ReplyToDisplayName))
				Mail.ReplyTo = new MailAddress(ReplyToEmail, ReplyToDisplayName);

			if (Attachments != null)
			{
				for (int i = 0; i < Attachments.Length; i++)
				{
					Attachments[i] = System.IO.Path.GetFullPath(Attachments[i]);
					Attachment FileAttachment = new Attachment(Attachments[i]);
					Mail.Attachments.Add(FileAttachment);
				}
			}

			//Construct SmtpClient Information
			Smtp.Host = ConfigurationManager.AppSettings["Smtp.Host"];
			Smtp.Port = int.Parse(ConfigurationManager.AppSettings["Smtp.Port"]);
			Smtp.EnableSsl = bool.Parse(ConfigurationManager.AppSettings["Smtp.UseSsl"]);

			//Constructing Credentials
			Smtp.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["Smtp.Username"], ConfigurationManager.AppSettings["Smtp.Password"]);

			try
			{
				//Sending Email
				Smtp.Send(Mail);

				//If no errors were generated during the sending, we must assume that the email was sent 
				//properly to the recipent.  We raise the OnSuccess event.
				if (OnSuccess != null)
				{
					OnSuccess();
				}
			}
			catch (Exception er)
			{
				//If an error occured during the sending of the e-mail, raise the OnError event.
				if (OnError != null)
				{
					OnError(er.Message, er.StackTrace);
				}
			}
		} //SendEmail

		/// <summary>
		/// This method validates the App.config settings and ensures they have proper casts.
		/// </summary>
		private void ValidateConfigFile()
		{

			#region Smtp.Port

			if (ConfigurationManager.AppSettings["Smtp.Host"] == null)
			{
				throw new NullReferenceException("Illuminate.EmailService: Smtp.Host cannot be blank");
			}
			else if (ConfigurationManager.AppSettings["Smtp.Host"].Length == 0)
			{
				throw new NullReferenceException("Illuminate.EmailService: Smtp.Host cannot be blank");
			}

			#endregion

			#region Smtp.Port

			if (ConfigurationManager.AppSettings["Smtp.Port"] == null)
			{
				throw new NullReferenceException("Illuminate.EmailService: Smtp.Port cannot be blank");
			}
			else if (ConfigurationManager.AppSettings["Smtp.Port"].Length == 0)
			{
				throw new NullReferenceException("Illuminate.EmailService: Smtp.Port cannot be blank");
			}
			else
			{
				int tmpNumber = 0;

				int.TryParse(ConfigurationManager.AppSettings["Smtp.Port"], out tmpNumber);

				if (tmpNumber == 0)
				{
					throw new InvalidCastException("Illuminate.EmailServer: Smtp.Port needs to be a valid integer");
				}
			}

			#endregion

			#region Smtp.UseSsl

			if (ConfigurationManager.AppSettings["Smtp.UseSsl"] == null)
			{
				throw new NullReferenceException("Illuminate.EmailService: Smtp.UseSsl cannot be blank");
			}
			else if (ConfigurationManager.AppSettings["Smtp.UseSsl"].Length == 0)
			{
				throw new NullReferenceException("Illuminate.EmailService: Smtp.UseSsl cannot be blank");
			}
			else
			{
				try
				{
					bool.Parse(ConfigurationManager.AppSettings["Smtp.UseSsl"]);
				}
				catch
				{
					throw new NullReferenceException("Illuminate.EmailService: Smtp.UseSsl needs to be a valid boolean");
				}
			}

			#endregion

			#region Smtp.Username
			/*
			if (ConfigurationManager.AppSettings["Smtp.Username"] == null)
			{
				throw new NullReferenceException("Gazaro.EmailService: Smtp.Username cannot be blank");
			}
			else if (ConfigurationManager.AppSettings["Smtp.Username"].Length == 0)
			{
				throw new NullReferenceException("Gazaro.EmailService: Smtp.Username cannot be blank");
			}

			#endregion

			#region Smtp.Password

			if (ConfigurationManager.AppSettings["Smtp.Password"] == null)
			{
				throw new NullReferenceException("Gazaro.EmailService: Smtp.Password cannot be blank");
			}
			else if (ConfigurationManager.AppSettings["Smtp.Password"].Length == 0)
			{
				throw new NullReferenceException("Gazaro.EmailService: Smtp.Password cannot be blank");
			}
            */
			#endregion

		} //ValidateConfigFile

		#endregion

	}
}
